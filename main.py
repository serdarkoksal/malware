import requests
from requests.api import request

from app import config
from flask import Flask, request
from flask_sqlalchemy import SQLAlchemy
from flask_restful import Api, reqparse

app = Flask(__name__)
api = Api(app)
parser = reqparse.RequestParser()

app.config.from_pyfile('app/config.py')
db = SQLAlchemy(app)

POSTGRES_URL = config.CONFIG['postgresUrl']
POSTGRES_USER = config.CONFIG['postgresUser']
POSTGRES_PASS = config.CONFIG['postgresPass']
POSTGRES_DB = config.CONFIG['postgresDb']
DB_URL = 'postgresql+psycopg2://{user}:{pw}@{url}/{db}'.format(user=POSTGRES_USER, pw=POSTGRES_PASS, url=POSTGRES_URL, db=POSTGRES_DB)

app.config['SQLALCHEMY_DATABASE_URI'] = DB_URL
db = SQLAlchemy(app)

class Hash(db.Model):
    __tablename__ = "malware"
    id = db.Column(db.Integer, primary_key=True)
    hash = db.Column(db.String(1000), unique=True)
    sha256_hash = db.Column(db.String(1000), unique=True)
    sha1_hash = db.Column(db.String(1000), unique=True)
    md5_hash = db.Column(db.String(1000), unique=True)
    first_seen = db.Column(db.DateTime)
    tags = db.Column(db.String(1000), unique=True)
    signatures = db.Column(db.String(1000), unique=True)

    def __init__(self, hash, sha256_hash, sha1_hash, md5_hash, first_seen, tags, signatures):
        self.hash = hash
        self.sha256_hash = sha256_hash
        self.sha1_hash = sha1_hash
        self.md5_hash = md5_hash
        self.first_seen = first_seen
        self.tags = tags
        self.signatures = signatures

@app.route('/api/v1/malware', methods=['GET', 'POST'])
def list_hash():

    print("Update Started")

    if request.method == "GET":
        db_hashs = Hash.query.all()
        result = [
            {
                "hash": db_hash.hash,
                'sha256_hash': db_hash.sha256_hash,
                'sha1_hash': db_hash.sha1_hash,
                'md5_hash': db_hash.md5_hash,
                'first_seen': db_hash.first_seen,
                'tags': db_hash.tags,
                'signatures': db_hash.signatures
            }for db_hash in db_hashs]

        return {"Hashs": result}
        
    elif request.method == 'POST':

        html = requests.get('https://bazaar.abuse.ch/export/txt/md5/recent/').text
        list_response = []
        for line in html.splitlines()[9:-1]:
            is_there_hash = Hash.query.filter_by(hash=line).first()
            if is_there_hash == None:
                print("Güncelleme başladı. Yeni hash ekleniyor.")
                hash = Hash(hash=line, sha256_hash=None, sha1_hash=None, md5_hash=None, first_seen=None, tags=None, signatures=None)
                db.session.add(hash)
                print("Yeni Hash:", line)

                headers = {'API-KEY': '03eef94f11f5c74939f19eb2002a83fd'}
                myobj = {'query': 'get_info',
                    'hash': line
                }
    
                response = requests.post('https://mb-api.abuse.ch/api/v1/', data = myobj, headers=headers).text
                sha256_hash = response.split('sha256_hash": "')[1].split('",')[0]
                sha1_hash = response.split('sha1_hash": "')[1].split('",')[0]
                md5_hash = response.split('md5_hash": "')[1].split('",')[0]
                first_seen = response.split('first_seen": "')[1].split('",')[0]

                if response.split('"tags":')[1][:5] == " null":
                    tag = "null"
                else:
                    tags = response.split('"tags": [\n')[1].split('],')[0]
                    tag = tags.replace('"','').replace("\n","").replace(" ","")

                if response.split('"signature":')[1][:5] == " null":
                    signature = "null"
                else:
                    signatures = response.split('"signature":')[1].split('",')[0]
                    signature = signatures.replace('{','').replace('}','').replace(' ','').replace('\n','').replace('\"','')
                
                response = {
                    'hash': line,
                    'sha256_hash': sha256_hash,
                    'sha1_hash': sha1_hash,
                    'md5_hash': md5_hash,
                    'first_seen': first_seen,
                    'tag': tag,
                    'signature': signature
                }
                list_response.append(response)

                db_hash = Hash.query.filter_by(hash=line).first()
                db_hash.sha256_hash = sha256_hash
                db_hash.sha1_hash = sha1_hash
                db_hash.md5_hash = md5_hash
                db_hash.first_seen = first_seen
                db_hash.tags = tag
                db_hash.signatures = signature

                db.session.commit()

        if list_response == []:
            return "Veritabanı güncel"
        else:
            return {"Hash": list_response}
        

@app.route('/api/v1/malware/<id>', methods=["GET", "DELETE"])
def get_hash(id):

    if request.method == "GET":
        hash_information = Hash.query.filter_by(id=id).first()

        response = {
            'id': hash_information.id,
            'hash': hash_information.hash,
            'sha256_hash': hash_information.sha256_hash,
            'sha1_hash': hash_information.sha1_hash,
            'md5_hash': hash_information.md5_hash,
            'first_seen': hash_information.first_seen,
            'tag': hash_information.tags,
            'signature': hash_information.signatures
        }

        return response

    elif request.method == "DELETE":

        hash_information = Hash.query.filter_by(id=id).first()
        db.session.delete(hash_information)
        db.session.commit()

        return f"{str(id)} nolu hash silindi"

@app.route('/api/v1/malware/count', methods=["GET"])
def hash_count():
    count = db.session.query(Hash.hash).count()
    
    print("Hash Count:", count)
    
    return {"Count": str(count)}

if __name__ == "__main__":
    app.run(debug=True, port=4552)